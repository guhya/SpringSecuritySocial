<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">
           
	<http use-expressions="true" disable-url-rewriting="true">
		
		<intercept-url pattern="/admin/login" 			access="permitAll"/>
		<intercept-url pattern="/admin/register"		access="permitAll"/>
		<intercept-url pattern="/auth/**" 				access="permitAll" />
		<intercept-url pattern="/admin/facebook/**" 	access="hasRole('ROLE_USER')" requires-channel="any"/>
		<intercept-url pattern="/admin/twitter/**" 		access="hasRole('ROLE_USER')" requires-channel="any"/>
		<intercept-url pattern="/admin/user/mydetail" 	access="hasRole('ROLE_USER')" requires-channel="any"/>
		<intercept-url pattern="/admin/**" 				access="hasRole('ROLE_ADMIN')" requires-channel="any"/>
		
		<form-login login-page="/admin/login" authentication-failure-url="/admin/login?error=1"/>
		
		<!-- Detect the submission of an invalid session ID, when timeout cookie need to be cleared explicitly -->
		<session-management invalid-session-url="/">
			<!-- Single login only -->
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</session-management>
		
		<!-- Cookie Only 
		<remember-me key="ewideplus.companyprofile" user-service-ref="userDetailsServiceImplementation" />
		-->				
		<remember-me data-source-ref="dataSource" user-service-ref="userDetailsServiceImplementation" services-alias="rm" />				
		
		<!-- Logout config, explicitly delete the JSESSIONID cookie on logging out -->
		<logout logout-url="/admin/logout" logout-success-url="/admin/login" delete-cookies="JSESSIONID"/>
		
		<!--  Spring Social Security authentication filter -->
		<custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />
		
	</http>
	
	<authentication-manager alias="authenticationManager">
		
		<!-- JDBC Provider 
		<authentication-provider user-service-ref="jdbcAuthenticationProvider"/>
		-->
		<!-- Dao Auth -->
		<authentication-provider ref="daoAuthenticationProvider"/>	
	
		<!-- Spring Social Security authentication provider -->
		<authentication-provider ref="socialAuthenticationProvider" />
		 
		<authentication-provider>
			<user-service id="inMemory">
				<user name="${dev.user}" password="${dev.password}" authorities="ROLE_ADMIN" />
			</user-service>
		</authentication-provider>		
		
		
	</authentication-manager>
	
	<!-- servlet.xml need to be iencluded in context before calling dataSource from here -->
	<beans:bean id="jdbcAuthenticationProvider" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property 
			name="usersByUsernameQuery"
			value="SELECT username, password, enabled FROM tbUser WHERE username = ?">
		</beans:property>
		<beans:property 
			name="authoritiesByUsernameQuery"
			value="SELECT username, role FROM tbUserRole WHERE username = ?">
		</beans:property>		
	</beans:bean>
	
	<beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userDetailsServiceImplementation"></beans:property>
	</beans:bean>
	
	<beans:bean id="userDetailsServiceImplementation" class="com.ewideplus.companyprofile.admin.service.implementation.UserDetailsServiceImpl" />
	
	<!-- Persistent Remember Me Service -->
	<beans:bean id="rememberMeAuthenticationProvider" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
	    <beans:property name="key" value="ewideplus.companyprofile" />
	    <beans:property name="tokenRepository" ref="jdbcTokenRepository" />
	    <beans:property name="userDetailsService" ref="userDetailsServiceImplementation" />
	</beans:bean>
	
	<!-- Uses a database table to maintain a set of persistent login data -->
	<beans:bean id="jdbcTokenRepository" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl"> 
	    <beans:property name="createTableOnStartup" value="false" /> 
	    <beans:property name="dataSource" ref="dataSource" /> 
	</beans:bean>	
	
</beans:beans>
